{"version":3,"file":"SectionStore.63b2f3c7.js","sources":["../../../../stores/SectionStore.js"],"sourcesContent":["import {defineStore} from 'pinia'\r\nimport { useThePrivateStore } from './private'\r\nimport { useTeamsStore } from './Teams'\r\nexport const useSectionStore = defineStore('section', ()=>{\r\n    const priv = useThePrivateStore()\r\n    const teams = useTeamsStore()\r\nconst current_section = useCookie('secionId', {maxAge: priv.Age})  \r\nconst current_name = useCookie('sectionName', {maxAge: priv.Age})  \r\nfunction vie_sect(section_id, section_name) {\r\n    current_section.value = section_id\r\n    current_name.value = section_name  \r\n}\r\nasync function publick (id) {   //делает содержание раздела публичным\r\n    const url = new URL(\r\n        \"https://api.wiki.itl.systems/team/article/mode\"\r\n    );\r\n    \r\n    const headers = {\r\n        \"Authorization\": \"Bearer \"+priv.token,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n    };\r\n    \r\n    let body = {\r\n        \"team_id\": teams.session_TeamID,\r\n        \"article_id\": id,\r\n        \"public\": 1\r\n    };\r\n    \r\n    const {error, data} = await useFetch(url, {\r\n        method: \"POST\",\r\n        headers,\r\n        body: JSON.stringify(body),\r\n    })\r\n    if (!data.value){\r\n        switch (error.value.statusCode) {\r\n            case 401: throw createError({ statusCode: 401, statusMessage: 'the session is over', fatal: true })\r\n            break;\r\n            case 500: throw createError({ statusCode: 500, statusMessage: 'invalid request', fatal: true })\r\n            break;\r\n            case 400: throw createError({ statusCode: 400, statusMessage: 'Запросу не хватает данных'})\r\n            break;\r\n            case 429: this.priv.Delete_token;\r\n                      throw createError({ statusCode: 400, statusMessage: 'Слишком много запросов', fatal: true})\r\n                      break;\r\n        }\r\n    }\r\n}\r\nasync function open (id){\r\n    const url = new URL(\r\n        \"https://api.wiki.itl.systems/team/section/mode\"\r\n    );\r\n    \r\n    const headers = {\r\n        \"Authorization\": \"Bearer \"+priv.token,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n    };\r\n    \r\n    let body = {\r\n        \"team_id\": teams.session_TeamID,\r\n        \"section_id\": id,\r\n        \"public\": 1\r\n    };\r\n    \r\n    const {error, data} = await useFetch(url, {\r\n        method: \"POST\",\r\n        headers,\r\n        body: JSON.stringify(body),\r\n    })\r\n   if (!data.value){\r\n    switch (error.value.statusCode) {\r\n        case 401: throw createError({ statusCode: 401, statusMessage: 'the session is over', fatal: true })\r\n        break;\r\n        case 500: throw createError({ statusCode: 500, statusMessage: 'invalid request', fatal: true })\r\n        break;\r\n        case 400: throw createError({ statusCode: 400, statusMessage: 'Запросу не хватает данных'})\r\n        break;\r\n        case 429: this.priv.Delete_token;\r\n                  throw createError({ statusCode: 400, statusMessage: 'Слишком много запросов', fatal: true})\r\n                  break;\r\n    }\r\n   }\r\n}\r\nasync function tp_add (r, data, userID, act) {  //берет данные созданного раздела\r\n   \r\n    if (r.error.value===null){\r\n        // open(r.data._rawValue.data.id)\r\n        for (let a = 0; a<=data.blocks.length-1; a++) {\r\n            data.blocks[a].name=data.blocks[a].type+\"_\"+a\r\n            data.blocks[a].content=data.blocks[a].data.text\r\n           }\r\n    \r\n        {vie_sect(r.data._rawValue.data.id, r.data._rawValue.data.name)\r\n            navigateTo('/'+teams.session_TeamCode+'.itl.wiki/section/'+r.data._rawValue.data.id)}\r\n    }\r\n    \r\n}\r\nfunction close_sect(){\r\n    current_section.value=null\r\n    current_name.value=null\r\n}\r\nasync function Add_section(act, userID, data, nameSection, parent){    //создание раздела\r\n    const url = new URL(\r\n        \"https://api.wiki.itl.systems/team/section/add\"\r\n    );\r\n    \r\n    const headers = {\r\n        \"Authorization\": \"Bearer \"+priv.token,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n    };\r\n    \r\n   \r\n    if (typeof userID!=='object') {\r\n        let body = {\r\n            \"team_id\": teams.session_TeamID,\r\n            \"name\": nameSection,\r\n            \"abilities\":{\r\n                \"0\":{\r\n                    \"user_id\": userID,\r\n                \"permission\": act\r\n                }\r\n            },\r\n            \"section_id\": parent,\r\n            \r\n        };//если пользователей несколько создаем массив, каждый элемент которого будет равен\r\n        //айди пользователя, и роли, а после делаем из массива объект и передаем в боди\r\n        if (data.blocks.length!==0){\r\n            for (var a = 0; a<=data.blocks.length-1; a++){\r\n                body.blocks+=data.blocks[a].data.text+' '\r\n            }\r\n         }\r\n        useFetch(url, {\r\n            method: \"POST\",\r\n            headers,\r\n            body: JSON.stringify(body),\r\n        }).then((r)=>{\r\n           \r\n            tp_add (r, data, userID, act)})\r\n\r\n        \r\n    }else{\r\n        var list_user = userID\r\n        var list_iduser = []\r\n            for (let a = 0; a<=list_user.length; a++)\r\n        {                    \r\n            list_iduser[a] = {\"user_id\": list_user[0].id, \"permission\": act}\r\n        }\r\n        let body = {\r\n            \"team_id\": teams.session_TeamID,\r\n            \"name\": nameSection,\r\n            \"abilities\": {...list_iduser},\r\n            \"section_id\": parent,\r\n            \"code\": \"код\",\r\n        };\r\n        \r\n         if (data.blocks.length!==0){\r\n            body.blocks=data.blocks[0].data.text\r\n         }\r\n            useFetch(url, {\r\n                method: \"POST\",\r\n                headers,\r\n                body: JSON.stringify(body),\r\n            }).then((r)=>{\r\n               \r\n                tp_add (r, data, userID, act)}) \r\n            \r\n        \r\n         \r\n        \r\n       \r\n    }\r\n   \r\n    \r\n}\r\nasync function Edit_score(type_act, UserID, type_entity, EntityID){   //изменение доступа у раздела\\статьи\r\n    if (type_act!==0){\r\n        const url = new URL(\r\n            \"https://api.wiki.itl.systems/team/abilities/edit\"\r\n        );\r\n        \r\n        const headers = {\r\n            \"Authorization\": \"Bearer \"+priv.token,\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        };\r\n        let body = {\r\n            \"team_id\": teams.session_TeamID,\r\n            \"entity_type\": type_entity,\r\n            \"entity_id\": type_entity==='section'?current_section.value:EntityID,\r\n            \"permission\": type_act\r\n        };\r\n        if (typeof UserID!=='object') {\r\n            body.user_id= UserID\r\n            \r\n            const {data} = await useFetch(url, {\r\n                method: \"POST\",\r\n                headers,\r\n                body: JSON.stringify(body),\r\n            });\r\n        }else{\r\n        \r\n            for (let a = 0; a<=(UserID.length)-1; a++){\r\n                let body = {\r\n                    \"team_id\": teams.session_TeamID,\r\n                    \"entity_type\": type_entity,\r\n                    \"entity_id\": type_entity==='section'?current_section.value:EntityID,\r\n                    \"permission\": type_act,\r\n                    \"user_id\": UserID[a].id\r\n                };\r\n                const {data} = await useFetch(url, {\r\n                    method: \"POST\",\r\n                    headers,\r\n                    body: JSON.stringify(body),\r\n                });\r\n            }\r\n            \r\n        }\r\n    }else{\r\n        const url = new URL(\r\n            \"https://api.wiki.itl.systems/team/abilities/delete\"\r\n        );\r\n        \r\n        const headers = {\r\n            \"Authorization\": \"Bearer \"+priv.token,\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n        };\r\n        let body = {\r\n            \"team_id\": teams.session_TeamID,\r\n            \"entity_type\": type_entity,\r\n            \"entity_id\": type_entity==='section'?current_section.value:EntityID,\r\n    \r\n        };\r\n        if (typeof UserID!=='object') {\r\n            body.user_id= UserID\r\n            \r\n            useFetch(url, {\r\n                method: \"POST\",\r\n                headers,\r\n                body: JSON.stringify(body),\r\n            });\r\n        }else{\r\n            for (let a = 0; a<=(UserID.length)-1; a++){\r\n                let body = {\r\n                    \"team_id\": teams.session_TeamID,\r\n                    \"entity_type\": type_entity,\r\n                    \"entity_id\": type_entity==='section'?current_section.value:EntityID,\r\n\r\n                    \"user_id\": UserID[a].id\r\n                };\r\n                useFetch(url, {\r\n                    method: \"POST\",\r\n                    headers,\r\n                    body: JSON.stringify(body),\r\n                });\r\n            }\r\n        } \r\n    }\r\n   \r\n   \r\n}\r\nasync function Edit_section (act, userID, data, nameSection, parent){\r\n    const url = new URL(\r\n        \"https://api.wiki.itl.systems/team/section/edit\"\r\n    );\r\n    \r\n    const headers = {\r\n        \"Authorization\": \"Bearer \"+priv.token,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"application/json\",\r\n    };\r\n    \r\n    let body = {\r\n        \"team_id\": teams.session_TeamID,\r\n        \"name\": nameSection,\r\n        \"section_id\": current_section.value,\r\n    };\r\n    if (data.blocks.length>=1){\r\n        body.blocks=''\r\n        for (var a = 0; a<=data.blocks.length-1; a++){\r\n            body.blocks+=data.blocks[a].data.text+' '\r\n        } \r\n    }else body.blocks='.'\r\n    if (parent!==current_section.value) body.parent_id=parent\r\n    \r\n    useFetch(url, {\r\n        method: \"POST\",\r\n        headers,\r\n        body: JSON.stringify(body),\r\n    }).then((r)=>{\r\n        if (!r.error.value){\r\n            window.location.href='/'+teams.session_TeamCode+'.itl.wiki/section/'+current_section.value\r\n            Edit_score(act, userID, 'section', current_section.value)\r\n        }else{\r\n            console.log('произошла ошибка')\r\n        }\r\n    })\r\n    // if (data.value){\r\n    //     navigateTo('/'+teams.session_TeamCode+'.itl.wiki/section/'+current_section.value)\r\n    // }       \r\n    \r\n   \r\n}\r\nreturn {current_section, current_name, close_sect, vie_sect, Edit_score, Add_section, Edit_section}  \r\n})"],"names":["useSectionStore","defineStore","priv","useThePrivateStore","teams","useTeamsStore","current_section","useCookie","current_name","vie_sect","section_id","section_name","tp_add","r","data","userID","act","a","navigateTo","close_sect","Add_section","nameSection","parent","url","headers","body","useFetch","list_user","list_iduser","Edit_score","type_act","UserID","type_entity","EntityID","Edit_section"],"mappings":"oHAGA,MAAAA,EAAAC,EAAA,UAAA,IAAA,CACA,MAAAC,EAAAC,EAAA,EACAC,EAAAC,EAAA,EACAC,EAAAC,EAAA,WAAA,CAAA,OAAAL,EAAA,GAAA,CAAA,EACAM,EAAAD,EAAA,cAAA,CAAA,OAAAL,EAAA,GAAA,CAAA,EACA,SAAAO,EAAAC,EAAAC,EAAA,CACAL,EAAA,MAAAI,EACAF,EAAA,MAAAG,CACA,CAyEA,eAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,CAEA,GAAAH,EAAA,MAAA,QAAA,KAAA,CAEA,QAAAI,EAAA,EAAAA,GAAAH,EAAA,OAAA,OAAA,EAAAG,IACAH,EAAA,OAAAG,GAAA,KAAAH,EAAA,OAAAG,GAAA,KAAA,IAAAA,EACAH,EAAA,OAAAG,GAAA,QAAAH,EAAA,OAAAG,GAAA,KAAA,KAGAR,EAAAI,EAAA,KAAA,UAAA,KAAA,GAAAA,EAAA,KAAA,UAAA,KAAA,IAAA,EACAK,EAAA,IAAAd,EAAA,iBAAA,qBAAAS,EAAA,KAAA,UAAA,KAAA,EAAA,CACA,CAEA,CACA,SAAAM,GAAA,CACAb,EAAA,MAAA,KACAE,EAAA,MAAA,IACA,CACA,eAAAY,EAAAJ,EAAAD,EAAAD,EAAAO,EAAAC,EAAA,CACA,MAAAC,EAAA,IAAA,IACA,+CACA,EAEAC,EAAA,CACA,cAAA,UAAAtB,EAAA,MACA,eAAA,mBACA,OAAA,kBACA,EAGA,GAAA,OAAAa,GAAA,SAAA,CACA,IAAAU,EAAA,CACA,QAAArB,EAAA,eACA,KAAAiB,EACA,UAAA,CACA,EAAA,CACA,QAAAN,EACA,WAAAC,CACA,CACA,EACA,WAAAM,CAEA,EAEA,GAAAR,EAAA,OAAA,SAAA,EACA,QAAAG,EAAA,EAAAA,GAAAH,EAAA,OAAA,OAAA,EAAAG,IACAQ,EAAA,QAAAX,EAAA,OAAAG,GAAA,KAAA,KAAA,IAGAS,EAAAH,EAAA,CACA,OAAA,OACA,QAAAC,EACA,KAAA,KAAA,UAAAC,CAAA,CACA,EAAA,aAAA,EAAA,KAAAZ,GAAA,CAEAD,EAAAC,EAAAC,CAAA,CAAA,CAAA,CAGA,KAAA,CACA,IAAAa,EAAAZ,EACAa,EAAA,CAAA,EACA,QAAAX,EAAA,EAAAA,GAAAU,EAAA,OAAAV,IAEAW,EAAAX,GAAA,CAAA,QAAAU,EAAA,GAAA,GAAA,WAAAX,CAAA,EAEA,IAAAS,EAAA,CACA,QAAArB,EAAA,eACA,KAAAiB,EACA,UAAA,CAAA,GAAAO,CAAA,EACA,WAAAN,EACA,KAAA,oBACA,EAEAR,EAAA,OAAA,SAAA,IACAW,EAAA,OAAAX,EAAA,OAAA,GAAA,KAAA,MAEAY,EAAAH,EAAA,CACA,OAAA,OACA,QAAAC,EACA,KAAA,KAAA,UAAAC,CAAA,CACA,EAAA,aAAA,EAAA,KAAAZ,GAAA,CAEAD,EAAAC,EAAAC,CAAA,CAAA,CAAA,CAMA,CAGA,CACA,eAAAe,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,CACA,GAAAH,IAAA,EAAA,CACA,MAAAP,EAAA,IAAA,IACA,kDACA,EAEAC,EAAA,CACA,cAAA,UAAAtB,EAAA,MACA,eAAA,mBACA,OAAA,kBACA,EACA,IAAAuB,EAAA,CACA,QAAArB,EAAA,eACA,YAAA4B,EACA,UAAAA,IAAA,UAAA1B,EAAA,MAAA2B,EACA,WAAAH,CACA,EACA,GAAA,OAAAC,GAAA,SACAN,EAAA,QAAAM,EAEA,MAAAL,EAAAH,EAAA,CACA,OAAA,OACA,QAAAC,EACA,KAAA,KAAA,UAAAC,CAAA,CACA,EAAA,aAAA,MAGA,SAAAR,EAAA,EAAAA,GAAAc,EAAA,OAAA,EAAAd,IAAA,CACA,IAAAQ,EAAA,CACA,QAAArB,EAAA,eACA,YAAA4B,EACA,UAAAA,IAAA,UAAA1B,EAAA,MAAA2B,EACA,WAAAH,EACA,QAAAC,EAAAd,GAAA,EACA,EACA,MAAAS,EAAAH,EAAA,CACA,OAAA,OACA,QAAAC,EACA,KAAA,KAAA,UAAAC,CAAA,CACA,EAAA,aAAA,CACA,CAGA,KAAA,CACA,MAAAF,EAAA,IAAA,IACA,oDACA,EAEAC,EAAA,CACA,cAAA,UAAAtB,EAAA,MACA,eAAA,mBACA,OAAA,kBACA,EACA,IAAAuB,EAAA,CACA,QAAArB,EAAA,eACA,YAAA4B,EACA,UAAAA,IAAA,UAAA1B,EAAA,MAAA2B,CAEA,EACA,GAAA,OAAAF,GAAA,SACAN,EAAA,QAAAM,EAEAL,EAAAH,EAAA,CACA,OAAA,OACA,QAAAC,EACA,KAAA,KAAA,UAAAC,CAAA,CACA,EAAA,aAAA,MAEA,SAAAR,EAAA,EAAAA,GAAAc,EAAA,OAAA,EAAAd,IAAA,CACA,IAAAQ,EAAA,CACA,QAAArB,EAAA,eACA,YAAA4B,EACA,UAAAA,IAAA,UAAA1B,EAAA,MAAA2B,EAEA,QAAAF,EAAAd,GAAA,EACA,EACAS,EAAAH,EAAA,CACA,OAAA,OACA,QAAAC,EACA,KAAA,KAAA,UAAAC,CAAA,CACA,EAAA,aAAA,CACA,CAEA,CAGA,CACA,eAAAS,EAAAlB,EAAAD,EAAAD,EAAAO,EAAAC,EAAA,CACA,MAAAC,EAAA,IAAA,IACA,gDACA,EAEAC,EAAA,CACA,cAAA,UAAAtB,EAAA,MACA,eAAA,mBACA,OAAA,kBACA,EAEA,IAAAuB,EAAA,CACA,QAAArB,EAAA,eACA,KAAAiB,EACA,WAAAf,EAAA,KACA,EACA,GAAAQ,EAAA,OAAA,QAAA,EAAA,CACAW,EAAA,OAAA,GACA,QAAAR,EAAA,EAAAA,GAAAH,EAAA,OAAA,OAAA,EAAAG,IACAQ,EAAA,QAAAX,EAAA,OAAAG,GAAA,KAAA,KAAA,GAEA,MAAAQ,EAAA,OAAA,IACAH,IAAAhB,EAAA,QAAAmB,EAAA,UAAAH,GAEAI,EAAAH,EAAA,CACA,OAAA,OACA,QAAAC,EACA,KAAA,KAAA,UAAAC,CAAA,CACA,EAAA,aAAA,EAAA,KAAAZ,GAAA,CACAA,EAAA,MAAA,MAIA,QAAA,IAAA,6FAAA,GAHA,OAAA,SAAA,KAAA,IAAAT,EAAA,iBAAA,qBAAAE,EAAA,MACAuB,EAAAb,EAAAD,EAAA,UAAAT,EAAA,KAAA,EAIA,CAAA,CAMA,CACA,MAAA,CAAA,gBAAAA,EAAA,aAAAE,EAAA,WAAAW,EAAA,SAAAV,EAAA,WAAAoB,EAAA,YAAAT,EAAA,aAAAc,CAAA,CACA,CAAA"}
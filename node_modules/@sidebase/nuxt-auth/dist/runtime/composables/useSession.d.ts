import type { AppProvider, BuiltInProviderType } from 'next-auth/providers';
import { SessionData } from './useSessionState';
/**
 * Utility type that allows autocompletion for a mix of literal, primitiva and non-primitive values.
 * @source https://github.com/microsoft/TypeScript/issues/29729#issuecomment-832522611
 */
type LiteralUnion<T extends U, U = string> = T | (U & Record<never, never>);
type SupportedProviders = LiteralUnion<BuiltInProviderType>;
interface SignInOptions extends Record<string, unknown> {
    /**
     * Specify to which URL the user will be redirected after signing in. Defaults to the page URL the sign-in is initiated from.
     *
     * [Documentation](https://next-auth.js.org/getting-started/client#specifying-a-callbackurl)
     */
    callbackUrl?: string;
    /** [Documentation](https://next-auth.js.org/getting-started/client#using-the-redirect-false-option) */
    redirect?: boolean;
}
type SignInAuthorizationParams = Record<string, string>;
interface SignOutOptions {
    callbackUrl?: string;
    redirect?: boolean;
}
declare const _default: () => {
    status: import("vue").ComputedRef<"authenticated" | "unauthenticated" | "loading">;
    data: Readonly<import("vue").Ref<{
        readonly user?: {
            readonly name?: string | null | undefined;
            readonly email?: string | null | undefined;
            readonly image?: string | null | undefined;
        } | undefined;
        readonly expires: string;
    } | null | undefined>>;
    lastRefreshedAt: Readonly<import("vue").Ref<Date | undefined>>;
    getSession: (getSessionOptions?: Partial<{
        required?: boolean | undefined;
        callbackUrl?: string | undefined;
        onUnauthenticated?: (() => void) | undefined;
    }> | undefined) => Promise<SessionData>;
    getCsrfToken: () => Promise<string>;
    getProviders: () => Promise<Record<SupportedProviders, Omit<AppProvider, "options"> | undefined>>;
    signIn: (provider?: SupportedProviders | undefined, options?: SignInOptions | undefined, authorizationParams?: SignInAuthorizationParams | undefined) => Promise<any>;
    signOut: (options?: SignOutOptions | undefined) => Promise<any>;
};
export default _default;
